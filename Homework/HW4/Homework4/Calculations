#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as f

################################################################
######################## Set Up ################################
################################################################

#Materials
Q = 0.01
Sigma_t = 100
#Sigma_s = Sigma_t
Sigma_s=100

#Geometry
L = 10.   #Width of slab
slices=[10,50,100] #Number of cuts in slab
N = 2     #Number of angle slices
BCs = f.np.zeros(N)

#Time
T=0    #total Time
dt=1 #Time steps width
v=1    #Velocity

#Method
Methods=['step','dd']
fig=f.plt.figure(figsize=f.FigureSize)
ax=fig.add_subplot(111);Check=0
for Method in Methods:
    for II in slices:
        if Method == 'step':
            I=II+1
        elif Method == 'dd':
            I=II
      
        #Width, ang lists for materials
        hx = L/II
        q = f.np.ones(I)*Q
        Sig_t_discr = f.np.ones(I)*Sigma_t
        Sig_s_discr = f.np.ones(I)*Sigma_s
        #Initialize psi
        if T==0:
            psi=f.np.zeros((N,I))
            Time=[0]
        else:
            psi=f.np.ones((N,I))*(1/hx)
            Time=f.Timevector(T,dt)
    
        #########################################################
        ##################### Calculations ######################
        #########################################################

        for t in Time: #Loop over time

            #Determine phi
            x, phi, iterations, errors, psi =f.source_iteration(I,
            hx,q,Sig_t_discr,Sig_s_discr,N,psi,v,dt,t,BCs,
            Method,tolerance=1.0e-8,maxits=10000,LOUD=False)

            XLabel='z position [cm]'
            YLabel="$\phi\left[\\frac{n\cdot cm}{cm^3\cdot s}\\right]$"

            ax,fig=f.plot(x,phi,ax,
                      Method+" : hx = "+str(hx),
                          fig,XLabel,YLabel,Check)
            Check=Check+1

        #########################################################
        ################### Legend/Save  ########################
        #########################################################

f.Legend(ax)
f.plt.savefig('SourceIteration.pdf')
        

        
#print(iter_GMRES_step_list[0])
#print(error_GMRES_step_list[0])

################################################################
####################### Plotting ###############################
################################################################

# Plot Source Iteration Solutions
#plt.plot(x_list[0],phi_SI_step_list[0],label="10 zone Step Solution")

# Plot Source Iteration and GMRES Step Solutions
#plt.plot(x_list[0],phi_SI_step_list[0],label="10 zone SI Step Solution")

# Plot convergence for Step Methods
#plt.plot(iter_SI_step_list[0],error_SI_step_list[0],label="10 zone SI Step Solution")


###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
