#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as f

################################################################
######################## Inputs ################################
################################################################

# Geometry
L = 10                       # Width of slab
# Constants
Q = 0.01
Sigma_t = 1;Sigma_s=1
# Add adsorption to help converge
if Sigma_t==Sigma_s:
    Sigma_t=Sigma_t*1.0001

slices=[500]           # Number of cuts in slab (looped)
NN = [4,6,50,100,200]               # Number of angle slices

#Time
T=1                           # total Time (A plot made at T)
dtt=[0.05]                     # Time steps width
v=1                           # Velocity

MAXITS=1000000                # Max iterations for source iter
loud=False                    # Echo every Iteration?

#Method
Methods=['GMRES:step',         # 'Iteration' or 'GMRES'
         'GMRES:dd']       # Methods to solve with?
                             # 'step' or 'dd'

tol=1e-8
Ttol=1e-3

PlotError=True              # Do we plot the error?

NumOfPoints=100              # Max Number of points for plots

################################################################
#################### Initialize Figures ########################
################################################################

Check=0
fig=f.plt.figure(figsize=f.FigureSize)   # Plot all Methods
ax=fig.add_subplot(111)
if PlotError:
    erfig=f.plt.figure(figsize=f.FigureSize) # Err Plot
    erax=erfig.add_subplot(111)              # at T=0


################################################################
##################### Calculations #############################
################################################################

for Scheme in Methods:

    Method=Scheme.split(':')[1]
    #########################################################
    ##################### Set Up ############################
    #########################################################

    for II in slices:
        if Method == 'step': #Step Dude needs one extra
            I=II+1
        elif Method == 'dd':
            I=II
      
        #Width, ang lists for materials
        hx = L/II
        q = f.np.ones(I)*Q
        Sig_t_discr = f.np.ones(I)*Sigma_t
        Sig_s_discr = f.np.ones(I)*Sigma_s


        for N in NN:
            BCs = f.np.zeros(N)           # Zero incoming flux
            for dt in dtt:
                #Initialize psi (for time steps)
                if T==0:
                    psi=f.np.zeros((N,I))
                    Time=[0]
                else:
                    psi=f.np.ones((N,I))*(1/hx)
                    Time=f.Timevector(T,dt)
                
                label_tmp=Scheme+":hx="+str(hx)+",N="+str(N)+",dt="+\
                           str(dt)+",T="
                #########################################################
                #################### Determine phi ######################
                #########################################################

                for t in Time: #Loop over time

                    label=label_tmp+str(round(t,3))
            
                    #Determine phi (new psi is determined for time steps)
                    x,phi,it,er,psi=f.solver(I,hx,q,Sig_t_discr,
                    Sig_s_discr,N,psi,v,dt,Time,BCs,Scheme,tol,MAXITS,loud)

                    #####################################################
                    ################ Plot Information ###################
                    #####################################################
                    PlotQuestion=abs(t-dt)<Ttol\
                    or abs(t-0.5)<Ttol or abs(t-1)<Ttol
                    PlotQuestion=abs(t-1)<Ttol
                    if PlotQuestion:
                        fig
                        ax,fig=f.plot(x,phi,ax,label,fig,Check,NumOfPoints)
                        if PlotError:
                            erfig
                            erax,erfig=f.plotE(it,er,erax,label,erfig,
                                               Check,NumOfPoints)
                        Check=Check+1

#########################################################
################### Legend/Save  ########################
#########################################################

fig
f.Legend(ax)
#f.plt.savefig('Plots/FluxPlot.pdf')
if PlotError:
    erfig
    f.Legend(erax)
    #f.plt.savefig('Plots/ErrorPlot.pdf')
    f.plt.savefig('Plots/ErrorPlotTimeVaryN.pdf')
    #f.plt.clf()
    f.plt.close()
fig
f.plt.savefig('Plots/FluxPlotTimeVaryN.pdf')
#f.plt.show()

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
