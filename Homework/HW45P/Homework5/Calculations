#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as f

################################################################
##################### Initialize System ########################
################################################################

NumOfPoints=100          # Max Number of points for plots

#########################################################
############# Initialize Matrix #########################
#########################################################

high_flux_fraction=0.5
phi=1.0e14
A,n0=f.MakeAb(high_flux_fraction,phi)

if not A.shape[0] == A.shape[1] or not A.shape[0] == len(n0):
    print("A is not a square matrix")
    quit()

#########################################################
############# Initialize Time ###########################
#########################################################

t=730.5;  #Two years in days
Nt=2000;   #Number of Time Steps
dt=t/Nt;
Time=f.np.linspace(0,t,Nt+1) #Time steps

################################################################
##################### Solve System #############################
################ And Time How long it takes ####################
################### For Each Method ############################
################# And Plot at Each Time Step ###################
################################################################

#Matrix Exp - Unstable
#Current_Time=time.time() 
#maxits=20
# nt_Mat=f.MatExp(A,n0,t,maxits)
# Mat_Time=time.time()-Current_Time
#nt_Mat=n0.copy();TIMEOLD=0
#for TIME in Time[1:len(Time)]: #Unstable
    #nt_Mat=f.MatExp(A,n0,TIME,maxits) No Converge
    #Step through
    #nt_Mat=f.MatExp(A,nt_Mat,TIME-TIMEOLD,maxits)
    #TIMEOLD=TIME.copy()
#nt_Mat=f.RationalApprox(A,n0,t,maxits) #one Step
#Mat_Time=time.time()-Current_Time

#########################################################
################ Backward Euler #########################
#########################################################

Current_Time=time.time()
nt_Back=n0.copy();
for i in range(Nt):
    nt_Back=f.BackEuler(A,nt_Back,dt)
    #axBack,figBack=f.plot(x,phi,
    #axBacl,label,figBack,Check,NumOfPoints)
Back_Time=time.time()-Current_Time

#########################################################
################ Rational Approx ########################
#########################################################

Current_Time=time.time()
N=10;
Method="Best"  #Parabola, Cotangent, Hyperbola, Best
ck,zk=f.RationalPrep(N,Method);nt_Rational=n0.copy();TIMEOLD=0
for TIME in Time[1:len(Time)]:
    nt_Rational=f.RationalApprox(A,n0,TIME,N,ck,zk)
    #Step through
    #nt_Rational=f.RationalApprox(A,nt_Rational,TIME-TIMEOLD,N,ck,zk)
    #TIMEOLD=TIME.copy()
#nt_Rational=f.RationalApprox(A,n0,t,N,ck,zk) #one Step
Rational_Time=time.time()-Current_Time

################################################################
################### Print Solution #############################
################################################################

Index=f.nuclides['H3']
print(Index)
MassConversion=(f.atom_mass[Index]/f.Na)   #/1000 #for kg
string="Isotope : "+f.nuclide_names[Index]+" Mass (g) = "
#Mass=nt_Mat[Index]*MassConversion
#print("Matrix Exp      : "+string,Mass," Time = ",Mat_Time)
Mass=nt_Back[Index]*MassConversion
print("Backward Euler  : "+string,Mass, " Time = ",Back_Time)
Mass=nt_Rational[Index]*MassConversion
print("Rational Approx : ",string,Mass," Time = ",Rational_Time)

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
