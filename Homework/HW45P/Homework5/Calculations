#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as f

################################################################
##################### Initialize System ########################
################################################################

NumOfPoints=100          # Max Number of points for plots

#########################################################
############# Initialize Matrix #########################
#########################################################

high_flux_fraction=0.5
phi=1.0e14
A,n0=f.MakeAb(high_flux_fraction,phi)

if not A.shape[0] == A.shape[1] or not A.shape[0] == len(n0):
    print("A is not a square matrix")
    quit()

#########################################################
############# Initialize Time ###########################
#########################################################

t=730.5;  #Two years in days
Nt=10;   #Number of Time Steps
dt=t/Nt;
Time=f.np.linspace(dt,t,Nt) #Time steps

################################################################
##################### Solve System #############################
################ And Time How long it takes ####################
################### For Each Method ############################
################# And Plot at Each Time Step ###################
################################################################

#Matrix Exp - Unstable
#Current_Time=time.time() 
#maxits=20
# nt_Mat=f.MatExp(A,n0,t,maxits)
# Mat_Time=time.time()-Current_Time
#nt_Mat=n0.copy();TIMEOLD=0
#for TIME in Time[1:len(Time)]: #Unstable
    #nt_Mat=f.MatExp(A,n0,TIME,maxits) No Converge
    #Step through
    #nt_Mat=f.MatExp(A,nt_Mat,TIME-TIMEOLD,maxits)
    #TIMEOLD=TIME.copy()
#nt_Mat=f.RationalApprox(A,n0,t,maxits) #one Step
#Mat_Time=time.time()-Current_Time

#########################################################
################ Backward Euler #########################
#########################################################

Current_Time=time.time()
File=f.PrepFile('BackEuler.csv',n0) #Prep File
nt_Back=n0.copy();
for TIME in Time:
    nt_Back=f.BackEuler(A,nt_Back,dt)
    File.write(str(TIME)+","+f.ListToStr(nt_Back))
File.close()
Back_Time=time.time()-Current_Time

#########################################################
################ Rational Approx ########################
#########################################################

Current_Time=time.time()
N=10;
Method="Best"  #Parabola, Cotangent, Hyperbola, Best
File=f.PrepFile(Method+".csv",n0)
ck,zk=f.RationalPrep(N,Method);nt_Rational=n0.copy();TIMEOLD=0
for TIME in Time:
    nt_Rational=f.RationalApprox(A,n0,TIME,N,ck,zk)
    File.write(str(TIME)+","+f.ListToStr(nt_Rational))
    #Step through
    #nt_Rational=f.RationalApprox(A,nt_Rational,TIME-TIMEOLD,N,ck,zk)
    #TIMEOLD=TIME.copy()
#nt_Rational=f.RationalApprox(A,n0,t,N,ck,zk) #one Step
File.close()
Rational_Time=time.time()-Current_Time

#########################################################
################# Plot Solution #########################
#########################################################

df = f.pd.read_csv('BackEuler.csv',index_col=False)
List=list(df.columns.values)
for item in List:
    if ToPlot(item,Plotting):

print(List)




################################################################
################### Print Solution #############################
################################################################

#f.Print("Matrix Exp","H3",nt_Mat,Mat_Time)
f.Print("Backward Euler","H3",nt_Back,Back_Time)
f.Print("Rational Approx ","H3",nt_Rational,Rational_Time)

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
