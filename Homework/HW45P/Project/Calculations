#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as f

################################################################
##################### Initialize System ########################
################################################################

NumOfPoints=2          # Max Number of points for plots
PlottingG1=["922350"]  #List elements you want to Plot 
CompareG1=["922350"]
PlottingG2=["922350"]  #List elements you want to Plot 
CompareG2=["922350"]
#List elements you want to compare between methods

#########################################################
############# Initialize Matrix #########################
#########################################################

phi=1.0e14

ToAdd=[]
Nuclides,Nuclide_Names=f.Isotopes(ToAdd)

#This variable takes a while to make, so if its already made
#Just load it
#f.os.system("rm Masses.npy")  #To start over and remake
if not f.os.path.isfile('Masses.npy'):
    #Grab atomic weight information
    df=f.pd.read_csv('Data/AtomicWeights.csv')
    Atom_Mass=f.GatherMasses(df,Nuclides)
    f.np.save('Masses',Atom_Mass)
else:
    Atom_Mass=f.np.load('Masses.npy')

#Load up all the decay constants
#f.os.system("rm Decay_Consts.npy") #To start over and remake
if not f.os.path.isfile('Decay_Consts.npy'):
    Decay_Conts=f.GatherDecay(Nuclide_Names)
    f.np.save('Decay_Consts',Decay_Conts)
else:
    Decay_Conts=f.np.load('Decay_Consts.npy')

#load up A and b with phi
#f.os.system("rm Amatrix.npy") #To start over
#f.os.system("rm n0vector.npy") #to start over
if not f.os.path.isfile('Amatrix.npy'):
    #A is in terms of years
    A,n0=f.MakeAb(phi,Nuclides,Nuclide_Names,Decay_Conts)
    f.np.save('Amatrix',A)
    f.np.save('n0vector',n0)
else:
    A=f.np.load('Amatrix.npy')
    n0=f.np.load('n0vector.npy')

phi=0
#load up A and b without phi (decay)
#f.os.system("rm Amatrixdecay.npy") #To start over
#f.os.system("rm n0vectordecay.npy") #to start over
if not f.os.path.isfile('Amatrixdecay.npy'):
    #A is in terms of years
    Adecay,n0=f.MakeAb(phi,Nuclides,Nuclide_Names,Decay_Conts)
    f.np.save('Amatrixdecay',A)
    f.np.save('n0vectordecay',n0)
else:
    Adecay=f.np.load('Amatrixdecay.npy')
    n0decay=f.np.load('n0vectordecay.npy')

if not A.shape[0] == A.shape[1] or not A.shape[0] == len(n0):
    print("A is not a square matrix")
    quit()

print("A is complete")
#########################################################
############# Initialize Time ###########################
#########################################################

t=3;  #years
Nt=5;   #Number of Time Steps
dt=t/Nt;
Time=f.np.linspace(dt,t,Nt) #Time steps

tDecay=0; #No time of decay
NtDecay=1; #Number of Decay Time Steps
dtDecay=tDecay/NtDecay
TimeDecay=f.np.linspace(t+dtDecay,t+tDecay,NtDecay)

################################################################
##################### Solve System #############################
################ And Time How long it takes ####################
################### For Each Method ############################
################# And Plot at Each Time Step ###################
################################################################

#Matrix Exp - Unstable
#Current_Time=time.time() 
#maxits=20
# nt_Mat=f.MatExp(A,n0,t,maxits)
# Mat_Time=time.time()-Current_Time
#nt_Mat=n0.copy();TIMEOLD=0
#for TIME in Time[1:len(Time)]: #Unstable
    #nt_Mat=f.MatExp(A,n0,TIME,maxits) No Converge
    #Step through
    #nt_Mat=f.MatExp(A,nt_Mat,TIME-TIMEOLD,maxits)
    #TIMEOLD=TIME.copy()
#nt_Mat=f.RationalApprox(A,n0,t,maxits) #one Step
#Mat_Time=time.time()-Current_Time

#########################################################
################ Backward Euler #########################
#########################################################

Current_Time=time.time()
File=f.PrepFile('BackEuler.csv',n0,Nuclide_Names,Atom_Mass,Decay_Conts) #Prep File
nt_Back=n0.copy();
#Irradiation Time
for TIME in Time:
    nt_Back=f.BackEuler(A,nt_Back,dt)
    File.write(str(TIME)+","+f.ListToStr(nt_Back))
#Decay Time
for TIME in TimeDecay:
    nt_Back=f.BackEuler(Adecay,nt_Back,dtDecay)
    File.write(str(TIME)+","+f.ListToStr(nt_Back))

File.close()
Back_Time=time.time()-Current_Time

#########################################################
################ Rational Approx ########################
#########################################################


#Irradiation Time
Current_Time=time.time()
N=10;
Method="Best"  #Parabola, Cotangent, Hyperbola, Best
File=f.PrepFile(Method+".csv",n0,Nuclide_Names,Atom_Mass,Decay_Conts)
ck,zk=f.RationalPrep(N,Method);nt_Rational=n0.copy();TIMEOLD=0
for TIME in Time:
    nt_Rational=f.RationalApprox(A,n0,TIME,N,ck,zk)
    File.write(str(TIME)+","+f.ListToStr(nt_Rational))
    #Step through
    #nt_Rational=f.RationalApprox(A,nt_Rational,TIME-TIMEOLD,N,ck,zk)
    #TIMEOLD=TIME.copy()
#nt_Rational=f.RationalApprox(A,n0,t,N,ck,zk) #one Step

#Non Irradiation Time
n0decay=nt_Rational

for TIME in TimeDecay:
    nt_Rational=f.RationalApprox(Adecay,n0decay,TIME-t,N,ck,zk)
    File.write(str(TIME)+","+f.ListToStr(nt_Rational))

File.close()
Rational_Time=time.time()-Current_Time

#########################################################
################# Plot Solution #########################
################# In Grams ##############################
################# and activity ##########################
#########################################################

dfBack = f.pd.read_csv('BackEuler.csv',index_col=False)
dfRational = f.pd.read_csv(Method+".csv",index_col=False)

# #Plot group 1 dudes Back Euler method
# f.plot(dfBack,PlottingG1,'BackEulerG1',NumOfPoints)
# f.plot(dfRational,PlottingG1,Method+'G1',NumOfPoints)

# #Plot group 2 dudes Rational method
# f.plot(dfBack,PlottingG2,'BackEulerG2',NumOfPoints)
# f.plot(dfRational,PlottingG2,Method+'G2',NumOfPoints)

# #Plot group 1 dudes, compare both methods
# Name='BackEuler_'+Method+"_G1"
# f.plots2(dfBack,dfRational,CompareG1,Name,
#          NumOfPoints,'BackEuler',Method)

#Plot group 2 dudes, compare both methods
#Name='BackEuler_'+Method+"_G2"
#f.plots2(dfBack,dfRational,CompareG2,Name,
#         NumOfPoints,'BackEuler',Method)

################################################################
################### Print Solution #############################
################################################################

#f.Print("Matrix Exp","H3",nt_Mat,Mat_Time)
f.Print("Backward Euler","922350",nt_Back,Back_Time,Nuclides,Atom_Mass,Nuclide_Names)
f.Print("Rational Approx ","922350",nt_Rational,Rational_Time,Nuclides,Atom_Mass,Nuclide_Names)


###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
