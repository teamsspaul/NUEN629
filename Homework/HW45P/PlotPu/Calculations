#!/usr/bin/env python3
#Means for improving speed. Make dir and save all variables
#made for making a, so that no parsing is needed,
#Just multiplying by phi

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as f

################################################################
##################### Initialize System ########################
################################################################

NumOfPoints=30          # Max Number of points for plots
PlottingG1=["942380","942390","942400","942410","942420"]  #List elements you want to Plot
CompareG1=["942380","942390","942400","942410","942420"]

#########################################################
############# Initialize Matrix #########################
#########################################################

#Calculate phi based on Power
phi=1.0e14;Power = 37.5 # MW (bc 1 ton HM power den is W/g)
Fissile_Isotopes=["922350","922380","942390","942410"]
FissionXSections=f.FindFissionXSection(Fissile_Isotopes)
MeVperFission=f.CalMevPerFiss(Fissile_Isotopes)
ToAdd=[]
Nuclides,Nuclide_Names=f.Isotopes(ToAdd)
n0=f.Makeb(Nuclides)
phi=f.Calculatephi(FissionXSections,MeVperFission,n0,Power,Fissile_Isotopes,Nuclides)

#This variable takes a while to make, so if its already made
#Just load it
#f.os.system("rm Saved_Variables/Masses.npy")  #To start over and remake
if not f.os.path.isfile('Saved_Variables/Masses.npy'):
    #Grab atomic weight information
    df=f.pd.read_csv('Data/AtomicWeights.csv')
    Atom_Mass=f.GatherMasses(df,Nuclides)
    f.np.save('Saved_Variables/Masses',Atom_Mass)
else:
    Atom_Mass=f.np.load('Saved_Variables/Masses.npy')

#Load up all the decay constants
#f.os.system("rm Saved_Variables/Decay_Consts.npy") #To start over and remake
if not f.os.path.isfile('Saved_Variables/Decay_Consts.npy'):
    Decay_Conts=f.GatherDecay(Nuclide_Names)
    f.np.save('Saved_Variables/Decay_Consts',Decay_Conts)
else:
    Decay_Conts=f.np.load('Saved_Variables/Decay_Consts.npy')

#load up A and b with phi
#f.os.system("rm Saved_Variables/Amatrix.npy") #To start over
#f.os.system("rm Saved_Variables/n0vector.npy") #to start over
if not f.os.path.isfile('Saved_Variables/Amatrix.npy'):
    #A is in terms of years
    A,n0=f.MakeAb(phi,Nuclides,Nuclide_Names,Decay_Conts)
    f.np.save('Saved_Variables/Amatrix',A)
    f.np.save('Saved_Variables/n0vector',n0)
else:
    A=f.np.load('Saved_Variables/Amatrix.npy')
    n0=f.np.load('Saved_Variables/n0vector.npy')

phi=0
#load up A and b without phi (decay)
#f.os.system("rm Saved_Variables/Amatrixdecay.npy") #To start over
#f.os.system("rm Saved_Variables/n0vectordecay.npy") #to start over
if not f.os.path.isfile('Saved_Variables/Amatrixdecay.npy'):
    #A is in terms of years
    Adecay,n0=f.MakeAb(phi,Nuclides,Nuclide_Names,Decay_Conts)
    f.np.save('Saved_Variables/Amatrixdecay',A)
    f.np.save('Saved_Variables/n0vectordecay',n0)
else:
    Adecay=f.np.load('Saved_Variables/Amatrixdecay.npy')
    n0decay=f.np.load('Saved_Variables/n0vectordecay.npy')

if not A.shape[0] == A.shape[1] or not A.shape[0] == len(n0):
    print("A is not a square matrix")
    quit()

print("A is complete")
#########################################################
############# Initialize Time ###########################
#########################################################

t=3;  #years
Nt=300;   #Number of Time Steps
dt=t/Nt;
Time=f.np.linspace(dt,t,Nt) #Time steps

tDecay=0; #No time of decay
NtDecay=1; #Number of Decay Time Steps
dtDecay=tDecay/NtDecay
TimeDecay=f.np.linspace(t+dtDecay,t+tDecay,NtDecay)

################################################################
##################### Solve System #############################
################ And Time How long it takes ####################
################### For Each Method ############################
################# And Plot at Each Time Step ###################
################################################################

#########################################################
################ Backward Euler #########################
#########################################################

# Current_Time=time.time()
# File=f.PrepFile('Data/BackEuler.csv',n0,Nuclide_Names,Atom_Mass,Decay_Conts) #Prep File
# nt_Back=n0.copy();
# #Irradiation Time
# for TIME in Time:
#     nt_Back=f.BackEuler(A,nt_Back,dt)
#     File.write(str(TIME)+","+f.ListToStr(nt_Back))
#     #print(nt_Back[Nuclides["942380"]]/nt_Back[Nuclides["952410"]])

# #Decay Time
# #for TIME in TimeDecay:
# #    nt_Back=f.BackEuler(Adecay,nt_Back,dtDecay)
# #    File.write(str(TIME)+","+f.ListToStr(nt_Back))

# File.close()
# Back_Time=time.time()-Current_Time

#########################################################
################ Rational Approx ########################
#########################################################


# #Irradiation Time
# Current_Time=time.time()
# N=10;
# Method="Best"  #Parabola, Cotangent, Hyperbola, Best
# File=f.PrepFile("Data/"+Method+".csv",n0,Nuclide_Names,Atom_Mass,Decay_Conts)
# ck,zk=f.RationalPrep(N,Method);nt_Rational=n0.copy();TIMEOLD=0
# for TIME in Time:
#     nt_Rational=f.RationalApprox(A,n0,TIME,N,ck,zk)
#     File.write(str(TIME)+","+f.ListToStr(nt_Rational))
#     #Step through
#     #nt_Rational=f.RationalApprox(A,nt_Rational,TIME-TIMEOLD,N,ck,zk)
#     #TIMEOLD=TIME.copy()
# nt_Rational=f.RationalApprox(A,n0,t,N,ck,zk) #one Step
# File.write(str(TIME)+","+f.ListToStr(nt_Rational))

# #Non Irradiation Time
# n0decay=nt_Rational

# #for TIME in TimeDecay:
# #    nt_Rational=f.RationalApprox(Adecay,n0decay,TIME-t,N,ck,zk)
# #    File.write(str(TIME)+","+f.ListToStr(nt_Rational))

# File.close()
# Rational_Time=time.time()-Current_Time

#########################################################
################# Plot Solution #########################
################# In Grams ##############################
################# and activity ##########################
#########################################################


dfBack = f.pd.read_csv('Data/BackEuler.csv',index_col=False)
#dfRational = f.pd.read_csv("Data/"+Method+".csv",index_col=False)

# #Plot group 1 dudes Back Euler method and rational
#f.plot(dfBack,PlottingG1,'BackEulerG1Minor',NumOfPoints)
#f.plot(dfRational,PlottingG1,Method+'G1',NumOfPoints)

#Plot as a function of burnup, and fraction of Pu239
f.plotburnPuComp(dfBack,PlottingG1,'BurnPuComp',NumOfPoints)


# #Plot group 2 dudes Rational method and back
#f.plot(dfBack,PlottingG2,'BackEulerG2A1000',NumOfPoints)
# f.plot(dfRational,PlottingG2,Method+'G2',NumOfPoints)

#Plot group 1 dudes, compare both methods
#Name='BackEuler_'+Method+"_G1"
#f.plots2(dfBack,dfRational,CompareG1,Name,
#         NumOfPoints,'BackEuler',Method)

#Plot group 2 dudes, compare both methods
#Name='BackEuler_'+Method+"_G2"
#f.plots2(dfBack,dfRational,CompareG2,Name,
#         NumOfPoints,'BackEuler',Method)


###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
